{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "bb9e017f-d293-4e82-8d9b-331ad79ae5de",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.linear_model import SGDRegressor\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV\n",
    "from sklearn.preprocessing import StandardScaler, OneHotEncoder, MinMaxScaler\n",
    "from sklearn.impute import SimpleImputer\n",
    "from sklearn.compose import ColumnTransformer\n",
    "from sklearn.metrics import mean_squared_error, mean_absolute_error"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b1b00d30-baeb-44e6-80e4-6620d47299c2",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os,urllib, urllib.request, sys, tarfile\n",
    "def downloadDataResource(file,sourcePath,compressed=None):\n",
    "    if not os.path.isfile(file):\n",
    "        try:\n",
    "            urllib.request.urlretrieve(sourcePath+(compressed if compressed else file),(compressed if compressed else file))\n",
    "            print(\"Downloaded\", (compressed if compressed else file) )\n",
    "            if compressed:\n",
    "                ucomp = tarfile.open(compressed)\n",
    "                ucomp.extractall()\n",
    "                ucomp.close()\n",
    "                print(\"File uncompressed.\")\n",
    "        except:\n",
    "            print(\"ERROR: File\", (compressed if compressed else file), \"not found. Data source missing.\")\n",
    "    else:\n",
    "        print(\"Data resource\", file, \"already downloaded.\")\n",
    "        \n",
    "from sklearn.model_selection import learning_curve\n",
    "\n",
    "def plot_learning_curve1(estimator,X,y,ylim=None,cv=None,n_jobs=None,train_sizes=np.linspace(0.1, 1.0, 20),scoring = 'neg_root_mean_squared_error'):\n",
    "    \n",
    "    _, axes = plt.subplots(1, 1, figsize=(10, 5))    \n",
    "    axes.set_title('Learning Curve')\n",
    "    if ylim is not None:\n",
    "        axes.set_ylim(*ylim)\n",
    "    axes.set_xlabel(\"Training examples\")\n",
    "    axes.set_ylabel(scoring)\n",
    "\n",
    "    train_sizes, train_scores, test_scores= learning_curve(estimator,X,y,cv=cv,n_jobs=n_jobs,train_sizes=train_sizes,scoring = scoring)\n",
    "    train_scores_mean = np.mean(train_scores, axis=1)\n",
    "    train_scores_std = np.std(train_scores, axis=1)\n",
    "    test_scores_mean = np.mean(test_scores, axis=1)\n",
    "    test_scores_std = np.std(test_scores, axis=1)\n",
    "\n",
    "    # Plot learning curve\n",
    "    axes.grid()\n",
    "    axes.fill_between(train_sizes,train_scores_mean - train_scores_std,train_scores_mean + train_scores_std,alpha=0.1,color=\"r\")\n",
    "    axes.fill_between(train_sizes,test_scores_mean - test_scores_std,test_scores_mean + test_scores_std,alpha=0.1,color=\"g\")\n",
    "    axes.plot(train_sizes, train_scores_mean, \"o-\", color=\"r\", label=\"Training score\")\n",
    "    axes.plot(train_sizes, test_scores_mean, \"o-\", color=\"g\", label=\"Cross-validation score\")\n",
    "    axes.legend(loc=\"best\")\n",
    "    plt.show()\n",
    "    \n",
    "    return"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0accad4b-d9d3-49ea-848f-e50fe1bc110c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Downloaded Crypto.csv\n"
     ]
    }
   ],
   "source": [
    "#get data\n",
    "path = 'https://raw.githubusercontent.com/SueMcMetzger/MachineLearning/main/chpt15/'\n",
    "cryp = 'Crypto.csv'\n",
    "downloadDataResource(cryp, path)\n",
    "\n",
    "cr = pd.read_csv(cryp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "da42f34a-ae74-47c7-bf45-a853a9ae1e61",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Price_ETH</th>\n",
       "      <th>TrxCount_ETH</th>\n",
       "      <th>MarketCap_ETH</th>\n",
       "      <th>TxValAdj_ETH</th>\n",
       "      <th>HashRate_ETH</th>\n",
       "      <th>Supply_ETH</th>\n",
       "      <th>Price_BTC</th>\n",
       "      <th>TrxCount_BTC</th>\n",
       "      <th>MarketCap_BTC</th>\n",
       "      <th>...</th>\n",
       "      <th>MarketCap_LTC</th>\n",
       "      <th>TxValAdj_LTC</th>\n",
       "      <th>HashRate_LTC</th>\n",
       "      <th>Supply_LTC</th>\n",
       "      <th>Price_DOGE</th>\n",
       "      <th>TrxCount_DOGE</th>\n",
       "      <th>MarketCap_DOGE</th>\n",
       "      <th>TxValAdj_DOGE</th>\n",
       "      <th>HashRate_DOGE</th>\n",
       "      <th>Supply_DOGE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>8/8/2015</td>\n",
       "      <td>1.199990</td>\n",
       "      <td>2881</td>\n",
       "      <td>8.676871e+07</td>\n",
       "      <td>1.609869e+07</td>\n",
       "      <td>0.096483</td>\n",
       "      <td>72307863.00</td>\n",
       "      <td>261.450276</td>\n",
       "      <td>100950</td>\n",
       "      <td>3.784608e+09</td>\n",
       "      <td>...</td>\n",
       "      <td>161254362.2</td>\n",
       "      <td>4450947.229</td>\n",
       "      <td>1.373247</td>\n",
       "      <td>41518510.58</td>\n",
       "      <td>0.000158</td>\n",
       "      <td>13529</td>\n",
       "      <td>15842194.95</td>\n",
       "      <td>255789.1237</td>\n",
       "      <td>1.274322</td>\n",
       "      <td>1.004700e+11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>8/9/2015</td>\n",
       "      <td>1.199990</td>\n",
       "      <td>1329</td>\n",
       "      <td>8.680133e+07</td>\n",
       "      <td>1.233428e+06</td>\n",
       "      <td>0.101360</td>\n",
       "      <td>72335041.28</td>\n",
       "      <td>266.342020</td>\n",
       "      <td>88144</td>\n",
       "      <td>3.856363e+09</td>\n",
       "      <td>...</td>\n",
       "      <td>163428350.2</td>\n",
       "      <td>5110514.149</td>\n",
       "      <td>1.283339</td>\n",
       "      <td>41545960.58</td>\n",
       "      <td>0.000165</td>\n",
       "      <td>15565</td>\n",
       "      <td>16611370.04</td>\n",
       "      <td>236901.1002</td>\n",
       "      <td>1.213870</td>\n",
       "      <td>1.004830e+11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8/10/2015</td>\n",
       "      <td>1.199990</td>\n",
       "      <td>2037</td>\n",
       "      <td>8.683471e+07</td>\n",
       "      <td>1.742816e+06</td>\n",
       "      <td>0.111855</td>\n",
       "      <td>72362858.62</td>\n",
       "      <td>264.928825</td>\n",
       "      <td>115928</td>\n",
       "      <td>3.837008e+09</td>\n",
       "      <td>...</td>\n",
       "      <td>164459746.4</td>\n",
       "      <td>4634816.727</td>\n",
       "      <td>1.303318</td>\n",
       "      <td>41574060.58</td>\n",
       "      <td>0.000163</td>\n",
       "      <td>14403</td>\n",
       "      <td>16332832.23</td>\n",
       "      <td>368072.2008</td>\n",
       "      <td>1.187068</td>\n",
       "      <td>1.004960e+11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>8/11/2015</td>\n",
       "      <td>0.990000</td>\n",
       "      <td>4963</td>\n",
       "      <td>7.166698e+07</td>\n",
       "      <td>1.190079e+06</td>\n",
       "      <td>0.124450</td>\n",
       "      <td>72390886.44</td>\n",
       "      <td>271.421736</td>\n",
       "      <td>115981</td>\n",
       "      <td>3.932145e+09</td>\n",
       "      <td>...</td>\n",
       "      <td>172520481.2</td>\n",
       "      <td>4729593.083</td>\n",
       "      <td>1.303318</td>\n",
       "      <td>41602160.58</td>\n",
       "      <td>0.000165</td>\n",
       "      <td>13457</td>\n",
       "      <td>16623780.95</td>\n",
       "      <td>287029.5232</td>\n",
       "      <td>1.206818</td>\n",
       "      <td>1.005090e+11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8/12/2015</td>\n",
       "      <td>1.288000</td>\n",
       "      <td>2036</td>\n",
       "      <td>9.327472e+07</td>\n",
       "      <td>8.199163e+05</td>\n",
       "      <td>0.130915</td>\n",
       "      <td>72418257.37</td>\n",
       "      <td>268.143868</td>\n",
       "      <td>116970</td>\n",
       "      <td>3.885502e+09</td>\n",
       "      <td>...</td>\n",
       "      <td>168765370.5</td>\n",
       "      <td>3929643.067</td>\n",
       "      <td>1.318284</td>\n",
       "      <td>41630610.58</td>\n",
       "      <td>0.000161</td>\n",
       "      <td>13527</td>\n",
       "      <td>16217282.80</td>\n",
       "      <td>204588.0333</td>\n",
       "      <td>1.192014</td>\n",
       "      <td>1.005220e+11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>8/13/2015</td>\n",
       "      <td>1.884800</td>\n",
       "      <td>2842</td>\n",
       "      <td>1.365472e+08</td>\n",
       "      <td>2.909098e+06</td>\n",
       "      <td>0.143057</td>\n",
       "      <td>72446525.50</td>\n",
       "      <td>264.691628</td>\n",
       "      <td>115808</td>\n",
       "      <td>3.836451e+09</td>\n",
       "      <td>...</td>\n",
       "      <td>162366699.0</td>\n",
       "      <td>2517399.518</td>\n",
       "      <td>1.302251</td>\n",
       "      <td>41659160.58</td>\n",
       "      <td>0.000157</td>\n",
       "      <td>13261</td>\n",
       "      <td>15822226.14</td>\n",
       "      <td>148796.3960</td>\n",
       "      <td>1.155016</td>\n",
       "      <td>1.005350e+11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>8/14/2015</td>\n",
       "      <td>1.795044</td>\n",
       "      <td>3174</td>\n",
       "      <td>1.301006e+08</td>\n",
       "      <td>3.522379e+06</td>\n",
       "      <td>0.179595</td>\n",
       "      <td>72477632.22</td>\n",
       "      <td>266.355942</td>\n",
       "      <td>110518</td>\n",
       "      <td>3.861519e+09</td>\n",
       "      <td>...</td>\n",
       "      <td>167976245.4</td>\n",
       "      <td>3644161.395</td>\n",
       "      <td>1.254357</td>\n",
       "      <td>41686660.58</td>\n",
       "      <td>0.000158</td>\n",
       "      <td>11665</td>\n",
       "      <td>15928025.04</td>\n",
       "      <td>141866.8901</td>\n",
       "      <td>1.137887</td>\n",
       "      <td>1.005470e+11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8/15/2015</td>\n",
       "      <td>1.782222</td>\n",
       "      <td>2284</td>\n",
       "      <td>1.292221e+08</td>\n",
       "      <td>1.345634e+07</td>\n",
       "      <td>0.210530</td>\n",
       "      <td>72506144.87</td>\n",
       "      <td>261.936837</td>\n",
       "      <td>96407</td>\n",
       "      <td>3.798350e+09</td>\n",
       "      <td>...</td>\n",
       "      <td>164456786.9</td>\n",
       "      <td>3519256.424</td>\n",
       "      <td>1.284006</td>\n",
       "      <td>41714810.58</td>\n",
       "      <td>0.000153</td>\n",
       "      <td>19423</td>\n",
       "      <td>15349316.87</td>\n",
       "      <td>179981.8785</td>\n",
       "      <td>1.172579</td>\n",
       "      <td>1.005600e+11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>8/16/2015</td>\n",
       "      <td>1.533074</td>\n",
       "      <td>2440</td>\n",
       "      <td>1.111988e+08</td>\n",
       "      <td>2.334648e+06</td>\n",
       "      <td>0.215718</td>\n",
       "      <td>72533239.41</td>\n",
       "      <td>258.930817</td>\n",
       "      <td>88617</td>\n",
       "      <td>3.755653e+09</td>\n",
       "      <td>...</td>\n",
       "      <td>165899107.6</td>\n",
       "      <td>4250538.100</td>\n",
       "      <td>1.212450</td>\n",
       "      <td>41741660.58</td>\n",
       "      <td>0.000149</td>\n",
       "      <td>27696</td>\n",
       "      <td>14959944.85</td>\n",
       "      <td>198845.8962</td>\n",
       "      <td>1.157520</td>\n",
       "      <td>1.005730e+11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>8/17/2015</td>\n",
       "      <td>1.296380</td>\n",
       "      <td>2512</td>\n",
       "      <td>9.406709e+07</td>\n",
       "      <td>2.819685e+06</td>\n",
       "      <td>0.241921</td>\n",
       "      <td>72561358.31</td>\n",
       "      <td>258.009398</td>\n",
       "      <td>120631</td>\n",
       "      <td>3.743236e+09</td>\n",
       "      <td>...</td>\n",
       "      <td>167099571.4</td>\n",
       "      <td>5132829.992</td>\n",
       "      <td>1.304049</td>\n",
       "      <td>41770910.58</td>\n",
       "      <td>0.000150</td>\n",
       "      <td>13478</td>\n",
       "      <td>15120048.35</td>\n",
       "      <td>107081.6032</td>\n",
       "      <td>1.153348</td>\n",
       "      <td>1.005850e+11</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10 rows × 25 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Date  Price_ETH  TrxCount_ETH  MarketCap_ETH  TxValAdj_ETH  \\\n",
       "0   8/8/2015   1.199990          2881   8.676871e+07  1.609869e+07   \n",
       "1   8/9/2015   1.199990          1329   8.680133e+07  1.233428e+06   \n",
       "2  8/10/2015   1.199990          2037   8.683471e+07  1.742816e+06   \n",
       "3  8/11/2015   0.990000          4963   7.166698e+07  1.190079e+06   \n",
       "4  8/12/2015   1.288000          2036   9.327472e+07  8.199163e+05   \n",
       "5  8/13/2015   1.884800          2842   1.365472e+08  2.909098e+06   \n",
       "6  8/14/2015   1.795044          3174   1.301006e+08  3.522379e+06   \n",
       "7  8/15/2015   1.782222          2284   1.292221e+08  1.345634e+07   \n",
       "8  8/16/2015   1.533074          2440   1.111988e+08  2.334648e+06   \n",
       "9  8/17/2015   1.296380          2512   9.406709e+07  2.819685e+06   \n",
       "\n",
       "   HashRate_ETH   Supply_ETH   Price_BTC  TrxCount_BTC  MarketCap_BTC  ...  \\\n",
       "0      0.096483  72307863.00  261.450276        100950   3.784608e+09  ...   \n",
       "1      0.101360  72335041.28  266.342020         88144   3.856363e+09  ...   \n",
       "2      0.111855  72362858.62  264.928825        115928   3.837008e+09  ...   \n",
       "3      0.124450  72390886.44  271.421736        115981   3.932145e+09  ...   \n",
       "4      0.130915  72418257.37  268.143868        116970   3.885502e+09  ...   \n",
       "5      0.143057  72446525.50  264.691628        115808   3.836451e+09  ...   \n",
       "6      0.179595  72477632.22  266.355942        110518   3.861519e+09  ...   \n",
       "7      0.210530  72506144.87  261.936837         96407   3.798350e+09  ...   \n",
       "8      0.215718  72533239.41  258.930817         88617   3.755653e+09  ...   \n",
       "9      0.241921  72561358.31  258.009398        120631   3.743236e+09  ...   \n",
       "\n",
       "   MarketCap_LTC  TxValAdj_LTC  HashRate_LTC   Supply_LTC  Price_DOGE  \\\n",
       "0    161254362.2   4450947.229      1.373247  41518510.58    0.000158   \n",
       "1    163428350.2   5110514.149      1.283339  41545960.58    0.000165   \n",
       "2    164459746.4   4634816.727      1.303318  41574060.58    0.000163   \n",
       "3    172520481.2   4729593.083      1.303318  41602160.58    0.000165   \n",
       "4    168765370.5   3929643.067      1.318284  41630610.58    0.000161   \n",
       "5    162366699.0   2517399.518      1.302251  41659160.58    0.000157   \n",
       "6    167976245.4   3644161.395      1.254357  41686660.58    0.000158   \n",
       "7    164456786.9   3519256.424      1.284006  41714810.58    0.000153   \n",
       "8    165899107.6   4250538.100      1.212450  41741660.58    0.000149   \n",
       "9    167099571.4   5132829.992      1.304049  41770910.58    0.000150   \n",
       "\n",
       "   TrxCount_DOGE  MarketCap_DOGE  TxValAdj_DOGE  HashRate_DOGE   Supply_DOGE  \n",
       "0          13529     15842194.95    255789.1237       1.274322  1.004700e+11  \n",
       "1          15565     16611370.04    236901.1002       1.213870  1.004830e+11  \n",
       "2          14403     16332832.23    368072.2008       1.187068  1.004960e+11  \n",
       "3          13457     16623780.95    287029.5232       1.206818  1.005090e+11  \n",
       "4          13527     16217282.80    204588.0333       1.192014  1.005220e+11  \n",
       "5          13261     15822226.14    148796.3960       1.155016  1.005350e+11  \n",
       "6          11665     15928025.04    141866.8901       1.137887  1.005470e+11  \n",
       "7          19423     15349316.87    179981.8785       1.172579  1.005600e+11  \n",
       "8          27696     14959944.85    198845.8962       1.157520  1.005730e+11  \n",
       "9          13478     15120048.35    107081.6032       1.153348  1.005850e+11  \n",
       "\n",
       "[10 rows x 25 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cr.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "13df657b-3f16-4ad9-bca4-5a8cab34dc75",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Predict the price of a single cryptocurrency using historic pricing for all cryptocurrencies.\n",
    "cr.drop(columns=['MarketCap_ETH', 'MarketCap_BTC', 'MarketCap_LTC', 'MarketCap_DOGE'], inplace=True)\n",
    "cr.dropna(how=\"any\", inplace=True)\n",
    "#Predicting ETH price"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "8382b311-1a89-4c86-ae3e-31040825cef1",
   "metadata": {},
   "outputs": [],
   "source": [
    "#is date a datetime?\n",
    "cr.dtypes\n",
    "#change date to datetime\n",
    "cr['Date']= pd.to_datetime(cr['Date'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "dc5304f6-ceac-463e-817e-26ff6dbacd60",
   "metadata": {},
   "outputs": [],
   "source": [
    "#splitting date\n",
    "cr[\"month\"] = (\n",
    "    cr['Date'].dt.month\n",
    ")\n",
    "cr[\"year\"] = (\n",
    "    cr['Date'].dt.year\n",
    ")\n",
    "cr[\"day\"] = (\n",
    "    cr['Date'].dt.day\n",
    ")\n",
    "#drop date\n",
    "cr.drop(columns=['Date'], inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "076be01d-3ea4-48da-b2a3-bdb1f7acef13",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>TrxCount_ETH</th>\n",
       "      <th>TxValAdj_ETH</th>\n",
       "      <th>HashRate_ETH</th>\n",
       "      <th>Supply_ETH</th>\n",
       "      <th>Price_BTC</th>\n",
       "      <th>TrxCount_BTC</th>\n",
       "      <th>TxValAdj_BTC</th>\n",
       "      <th>HashRate_BTC</th>\n",
       "      <th>Supply_BTC</th>\n",
       "      <th>Price_LTC</th>\n",
       "      <th>...</th>\n",
       "      <th>HashRate_LTC</th>\n",
       "      <th>Supply_LTC</th>\n",
       "      <th>Price_DOGE</th>\n",
       "      <th>TrxCount_DOGE</th>\n",
       "      <th>TxValAdj_DOGE</th>\n",
       "      <th>HashRate_DOGE</th>\n",
       "      <th>Supply_DOGE</th>\n",
       "      <th>month</th>\n",
       "      <th>year</th>\n",
       "      <th>day</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>483</th>\n",
       "      <td>41357</td>\n",
       "      <td>2.318120e+07</td>\n",
       "      <td>5.294632</td>\n",
       "      <td>8.657739e+07</td>\n",
       "      <td>766.110468</td>\n",
       "      <td>287254</td>\n",
       "      <td>2.301073e+08</td>\n",
       "      <td>2.451895e+06</td>\n",
       "      <td>16022423.60</td>\n",
       "      <td>3.919367</td>\n",
       "      <td>...</td>\n",
       "      <td>1.977513</td>\n",
       "      <td>48722379.33</td>\n",
       "      <td>0.000214</td>\n",
       "      <td>6338</td>\n",
       "      <td>4.121671e+05</td>\n",
       "      <td>1.663345</td>\n",
       "      <td>1.070920e+11</td>\n",
       "      <td>12</td>\n",
       "      <td>2016</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1826</th>\n",
       "      <td>1249695</td>\n",
       "      <td>1.189634e+09</td>\n",
       "      <td>188.877512</td>\n",
       "      <td>1.120874e+08</td>\n",
       "      <td>11598.969060</td>\n",
       "      <td>327415</td>\n",
       "      <td>3.663947e+09</td>\n",
       "      <td>1.272995e+08</td>\n",
       "      <td>18454235.88</td>\n",
       "      <td>57.265089</td>\n",
       "      <td>...</td>\n",
       "      <td>244.260975</td>\n",
       "      <td>65633270.15</td>\n",
       "      <td>0.003508</td>\n",
       "      <td>53451</td>\n",
       "      <td>6.672502e+06</td>\n",
       "      <td>237.471610</td>\n",
       "      <td>1.256330e+11</td>\n",
       "      <td>8</td>\n",
       "      <td>2020</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2042</th>\n",
       "      <td>1284767</td>\n",
       "      <td>7.212154e+09</td>\n",
       "      <td>410.041845</td>\n",
       "      <td>1.150120e+08</td>\n",
       "      <td>57847.254940</td>\n",
       "      <td>293471</td>\n",
       "      <td>1.359651e+10</td>\n",
       "      <td>1.407384e+08</td>\n",
       "      <td>18651101.13</td>\n",
       "      <td>201.481612</td>\n",
       "      <td>...</td>\n",
       "      <td>283.306210</td>\n",
       "      <td>67189594.22</td>\n",
       "      <td>0.055912</td>\n",
       "      <td>32179</td>\n",
       "      <td>1.149887e+08</td>\n",
       "      <td>281.317163</td>\n",
       "      <td>1.285940e+11</td>\n",
       "      <td>3</td>\n",
       "      <td>2021</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1458</th>\n",
       "      <td>718438</td>\n",
       "      <td>6.160842e+08</td>\n",
       "      <td>171.364416</td>\n",
       "      <td>1.072010e+08</td>\n",
       "      <td>11790.023940</td>\n",
       "      <td>339296</td>\n",
       "      <td>3.759837e+09</td>\n",
       "      <td>7.054686e+07</td>\n",
       "      <td>17859892.32</td>\n",
       "      <td>95.985062</td>\n",
       "      <td>...</td>\n",
       "      <td>450.591425</td>\n",
       "      <td>63002170.70</td>\n",
       "      <td>0.003015</td>\n",
       "      <td>31990</td>\n",
       "      <td>5.428426e+06</td>\n",
       "      <td>418.611934</td>\n",
       "      <td>1.205660e+11</td>\n",
       "      <td>8</td>\n",
       "      <td>2019</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2141</th>\n",
       "      <td>1170182</td>\n",
       "      <td>1.737867e+10</td>\n",
       "      <td>556.419273</td>\n",
       "      <td>1.163476e+08</td>\n",
       "      <td>35714.312080</td>\n",
       "      <td>224077</td>\n",
       "      <td>9.982358e+09</td>\n",
       "      <td>1.228672e+08</td>\n",
       "      <td>18738100.04</td>\n",
       "      <td>155.920730</td>\n",
       "      <td>...</td>\n",
       "      <td>295.428983</td>\n",
       "      <td>67903230.09</td>\n",
       "      <td>0.292465</td>\n",
       "      <td>23727</td>\n",
       "      <td>7.437646e+08</td>\n",
       "      <td>313.310181</td>\n",
       "      <td>1.299440e+11</td>\n",
       "      <td>6</td>\n",
       "      <td>2021</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      TrxCount_ETH  TxValAdj_ETH  HashRate_ETH    Supply_ETH     Price_BTC  \\\n",
       "483          41357  2.318120e+07      5.294632  8.657739e+07    766.110468   \n",
       "1826       1249695  1.189634e+09    188.877512  1.120874e+08  11598.969060   \n",
       "2042       1284767  7.212154e+09    410.041845  1.150120e+08  57847.254940   \n",
       "1458        718438  6.160842e+08    171.364416  1.072010e+08  11790.023940   \n",
       "2141       1170182  1.737867e+10    556.419273  1.163476e+08  35714.312080   \n",
       "\n",
       "      TrxCount_BTC  TxValAdj_BTC  HashRate_BTC   Supply_BTC   Price_LTC  ...  \\\n",
       "483         287254  2.301073e+08  2.451895e+06  16022423.60    3.919367  ...   \n",
       "1826        327415  3.663947e+09  1.272995e+08  18454235.88   57.265089  ...   \n",
       "2042        293471  1.359651e+10  1.407384e+08  18651101.13  201.481612  ...   \n",
       "1458        339296  3.759837e+09  7.054686e+07  17859892.32   95.985062  ...   \n",
       "2141        224077  9.982358e+09  1.228672e+08  18738100.04  155.920730  ...   \n",
       "\n",
       "      HashRate_LTC   Supply_LTC  Price_DOGE  TrxCount_DOGE  TxValAdj_DOGE  \\\n",
       "483       1.977513  48722379.33    0.000214           6338   4.121671e+05   \n",
       "1826    244.260975  65633270.15    0.003508          53451   6.672502e+06   \n",
       "2042    283.306210  67189594.22    0.055912          32179   1.149887e+08   \n",
       "1458    450.591425  63002170.70    0.003015          31990   5.428426e+06   \n",
       "2141    295.428983  67903230.09    0.292465          23727   7.437646e+08   \n",
       "\n",
       "      HashRate_DOGE   Supply_DOGE  month  year  day  \n",
       "483        1.663345  1.070920e+11     12  2016    3  \n",
       "1826     237.471610  1.256330e+11      8  2020    7  \n",
       "2042     281.317163  1.285940e+11      3  2021   11  \n",
       "1458     418.611934  1.205660e+11      8  2019    5  \n",
       "2141     313.310181  1.299440e+11      6  2021   18  \n",
       "\n",
       "[5 rows x 22 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#traditional regression model\n",
    "\n",
    "#train/test spit\n",
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "    cr.drop(columns=['Price_ETH']),\n",
    "    cr['Price_ETH'], \n",
    "    random_state=32\n",
    ")\n",
    "\n",
    "X_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "410b54d2-9b35-4bc7-9810-72a808d22da7",
   "metadata": {},
   "outputs": [],
   "source": [
    "#set up pipeline\n",
    "cat_attribs = []\n",
    "num_attribs = list( X_train.drop(columns=cat_attribs) )\n",
    "\n",
    "num_pipeline = Pipeline( [\n",
    " ('imputer', SimpleImputer(strategy=\"median\")), \n",
    " ('std_scaler', StandardScaler())\n",
    "])\n",
    "\n",
    "full_pipeline = ColumnTransformer( [\n",
    "    ('num', num_pipeline, num_attribs),\n",
    "    ('cat', OneHotEncoder(sparse=False), cat_attribs)      \n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "01bdf6c1-1c80-4868-9c7f-32e92aed2c45",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((1787, 22), (596, 22))"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#run through pipeline\n",
    "X_train = full_pipeline.fit_transform( X_train )\n",
    "X_test = full_pipeline.transform( X_test )\n",
    "\n",
    "X_train.shape, X_test.shape\n",
    "\n",
    "#no cat columns so not cat encoder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "a43fa4d0-2f2e-49be-93b3-afcb02c0d439",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1167.5091993409787\n"
     ]
    }
   ],
   "source": [
    "#baseline determination\n",
    "baseline_prediction = y_train.median()\n",
    "predictions = np.full(shape=1787, fill_value = baseline_prediction)\n",
    "baseline_rmse = mean_squared_error(y_train, predictions, squared=False)\n",
    "print(baseline_rmse)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "4fe5fb25-16ba-4a4a-931a-cbcf88292ad0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 97.20%\n",
      "Accuracy: 97.04%\n",
      "Accuracy: 97.41%\n",
      "32415.204662072472\n"
     ]
    }
   ],
   "source": [
    "# Train the logistic regression model\n",
    "sgd = SGDRegressor()\n",
    "\n",
    "#fit the model to the training data\n",
    "sgd.fit(X_train, y_train)\n",
    "\n",
    "acc = sgd.score(X_train, y_train)\n",
    "print('Accuracy: {:.2f}%'.format(acc*100))\n",
    "\n",
    "scores = cross_val_score(sgd, X_train, y_train, cv=10)\n",
    "scores.mean()\n",
    "print('Accuracy: {:.2f}%'.format(scores.mean()*100))\n",
    "\n",
    "acc = sgd.score(X_test, y_test)\n",
    "print('Accuracy: {:.2f}%'.format(acc*100))\n",
    "\n",
    "predictions = sgd.predict(X_train)\n",
    "sgd_rmse = mean_squared_error(y_train, predictions, squared=False)\n",
    "print(sgd_rmse)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "45768519-c598-4cdd-ab1a-3c8497f1f3c1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_learning_curve1(sgd, X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "7d2a56e6-f963-4d8b-bdc2-ccbc326c5085",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SGDRegressor(eta0=0.001, max_iter=10000, penalty='None')"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#gridsearch cv for sgd\n",
    "param_grid = [\n",
    "    {'max_iter': [1000, 10000], 'eta0': [ .001, .01, .1],\n",
    "     'tol': [.001, .01, .1],'penalty':['None', 'l2']},\n",
    "  ]\n",
    "search = GridSearchCV(sgd, param_grid, scoring='neg_mean_absolute_error', cv=5, n_jobs=-1)\n",
    "results = search.fit(X_train, y_train)\n",
    "cvres = search.cv_results_\n",
    "    \n",
    "search.best_params_\n",
    "search.best_estimator_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "b47bf163-7d5e-4b2a-a98b-0afbb9ea070b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 97.25%\n",
      "Accuracy: 97.04%\n",
      "Accuracy: 97.54%\n",
      "178.29898459364293\n",
      "169.2600811913385\n"
     ]
    }
   ],
   "source": [
    "#apply tuning\n",
    "model = SGDRegressor(**search.best_params_)\n",
    "model.fit(X_train, y_train)\n",
    "\n",
    "acc = model.score(X_train, y_train)\n",
    "print('Accuracy: {:.2f}%'.format(acc*100))\n",
    "\n",
    "scores = cross_val_score(model, X_train, y_train, cv=10)\n",
    "scores.mean()\n",
    "print('Accuracy: {:.2f}%'.format(scores.mean()*100))\n",
    "\n",
    "acc = model.score(X_test, y_test)\n",
    "print('Accuracy: {:.2f}%'.format(acc*100))\n",
    "\n",
    "predictions = model.predict(X_train)\n",
    "tuning_rmse = mean_squared_error(y_train, predictions, squared=False)\n",
    "print(tuning_rmse)\n",
    "\n",
    "predictions = model.predict(X_test)\n",
    "test_rmse = mean_squared_error(y_test, predictions, squared=False)\n",
    "print(test_rmse)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "2490ac7c-6062-48ab-8b90-37bd50bd7aed",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test RMSE is $998.25 less than baseline RMSE.\n"
     ]
    }
   ],
   "source": [
    "changermsebL = baseline_rmse-test_rmse\n",
    "print('Test RMSE is ${:.2f} less than baseline RMSE.'.format(changermsebL))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1ed30d4e-a00c-4204-bd82-f85353e65723",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
